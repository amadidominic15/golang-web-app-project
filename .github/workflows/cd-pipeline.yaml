name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches:
      - main

env:
  TERRAFORM_ACTION: destroy  # change to apply, destroy, or any other value

jobs:
  eks_deployment:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform

    outputs:
      terraform_action: ${{ steps.terraform.outputs.action }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: true

      - name: Initialize and Run Terraform
        id: terraform
        run: |
            chmod +x terraform/script/terraform-run.sh
            ./terraform/script/terraform-run.sh
        env:
          TERRAFORM_ACTION: ${{ env.TERRAFORM_ACTION }}

      - name: Get EKS cluster name
        if: ${{ steps.terraform.outputs.action == 'apply' }}
        id: get-cluster
        run: |
          CLUSTER_NAME=$(terraform output -raw cluster_name)
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
          echo "EKS cluster name: $CLUSTER_NAME"

  app_deployment:
    runs-on: ubuntu-latest
    needs: eks_deployment
    if: ${{ needs.eks_deployment.outputs.terraform_action == 'apply' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.33.0"

      - name: Configure kubectl
        env:
          KUBECONFIG: ${{ runner.temp }}/kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name ${{ env.CLUSTER_NAME }} \
            --region ${{ secrets.AWS_REGION }} \
            --kubeconfig $KUBECONFIG
          echo "KUBECONFIG=$KUBECONFIG" >> $GITHUB_ENV

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.16.0'

      - name: Helm Lint
        run: helm lint ./web-app-chart

      - name: Helm Deploy
        run: |
          helm upgrade --install web-app ./web-app-chart --namespace web-app --create-namespace
